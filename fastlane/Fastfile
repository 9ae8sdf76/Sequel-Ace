# By Jakub Kaspar 21/11/2020
# Copyright Â© 2020 Sequel-Ace. All rights reserved.

# Fastlane Constants
default_platform :mac
fastlane_version "2.168.0"

GITHUB_REPO = "Sequel-Ace/Sequel-Ace"
PROJECT_NAME = "sequel-ace.xcodeproj"
QK_PROJECT_NAME = "Frameworks/QueryKit/QueryKit.xcodeproj"
SPMYSQL_PROJECT_NAME = "Frameworks/SPMySQLFramework/SPMySQLFramework.xcodeproj"
WORKSPACE_NAME = "sequel-ace.xcworkspace"
TARGET_NAME = "Sequel Ace"
ARCHIVE_PATH = "./build-dir/" + TARGET_NAME + ".xcarchive"
DYSYM_PATH = ARCHIVE_PATH + "/dSYMs"

platform :mac do

   ############################## Overrides ##############################

   before_all do
   end

   after_all do |lane|
      clean_build_artifacts
   end

   error do |lane, exception|
      clean_build_artifacts
   end

   desc "Creates new branch prepare_release, updates strings, increments build version, generates changelog, creates a PR."
   lane :prepare_release do |options|
   
      # Checkout to prepare release branch
      sh "git checkout -b prepare_release"
      ensure_git_branch(
         branch: 'prepare_release'
      )
      sh "git push -u origin prepare_release"
      
      update_strings
      increment_build_version
      changelog = generate_changelog_locally

      # Commit and push changelog changes
      sh "git commit -am 'Changelog updates'"
      sh "git push -u origin prepare_release"

      # Create Pull request to master
      create_pull_request(
         api_token: ENV['GITHUB_TOKEN'],
         repo: GITHUB_REPO,
         base: "main",
         title: "Prepare release",
         body: changelog
      )
   end

   desc "Creates new branch prepare_release, updates strings, increments app version, increments build version, generates changelog, creates a PR."
   lane :prepare_beta_release_bump_version do |options|

      # Checkout to prepare release branch
      sh "git checkout -b prepare_release"
      ensure_git_branch(
         branch: 'prepare_release'
      )
      sh "git push -u origin prepare_release"

      increment_app_version
      update_strings
      increment_build_version
      
      changelog = generate_changelog_locally
      
      sh "git push -u origin prepare_release"

      # Create Pull request to master
      create_pull_request(
         api_token: ENV['GITHUB_TOKEN'],
         repo: GITHUB_REPO,
         base: "main",
         title: "Prepare Beta release",
         body: changelog
      )

      reset_git_repo(
         skip_clean: true,
         force: true,
         files: [
            "CHANGELOG.md"
         ]
      )
   end

   desc "Creates new branch prepare_release, updates strings, increments app patch version, increments build version, generates changelog, creates a PR."
   lane :prepare_beta_release_bump_patch_version do |options|

      # Checkout to prepare release branch
      sh "git checkout -b prepare_release"
      ensure_git_branch(
         branch: 'prepare_release'
      )
      sh "git push -u origin prepare_release"

      increment_app_patch_version
      update_strings
      increment_build_version
      
      changelog = generate_changelog_locally
      
      sh "git push -u origin prepare_release"

      # Create Pull request to master
      create_pull_request(
         api_token: ENV['GITHUB_TOKEN'],
         repo: GITHUB_REPO,
         base: "main",
         title: "Prepare Beta release",
         body: changelog
      )

      reset_git_repo(
         skip_clean: true,
         force: true,
         files: [
            "CHANGELOG.md"
         ]
      )
   end

   desc "Creates new branch prepare_release, updates strings, increments build version, generates changelog, creates a PR."
   lane :prepare_beta_release do |options|

      # Checkout to prepare release branch
      sh "git checkout -b prepare_release"
      ensure_git_branch(
         branch: 'prepare_release'
      )
      sh "git push -u origin prepare_release"
      
      update_strings
      increment_build_version
      
      changelog = generate_changelog_locally
      
      sh "git push -u origin prepare_release"

      # Create Pull request to master
      create_pull_request(
         api_token: ENV['GITHUB_TOKEN'],
         repo: GITHUB_REPO,
         base: "main",
         title: "Prepare Beta release",
         body: changelog
      )

      reset_git_repo(
         skip_clean: true,
         force: true,
         files: [
            "CHANGELOG.md"
         ]
      )
   end

   ############################## XCode ##############################

   desc "Creates new branch changelog, generates changelog, creates a PR."
   lane :generate_changelog do |options|

      # Checkout to changelog branch
      sh "git checkout -b changelog"
      ensure_git_branch(
         branch: 'changelog'
      )
      
      changelog = generate_changelog_locally

      # Commit and push changelog changes
      sh "git commit -am 'Changelog updates'"
      sh "git push -u origin changelog"

      # Create Pull request to master
      create_pull_request(
         api_token: ENV['GITHUB_TOKEN'],
         repo: GITHUB_REPO,
         base: "main",
         title: "Changelog",
         body: changelog
      )
   end

   desc "Generates changelog only."
   lane :generate_changelog_locally do |options|
      version = get_version_number(xcodeproj: PROJECT_NAME, target: TARGET_NAME)
      sh "../Scripts/generate-changelog.sh #{version}"
   end

   desc "Builds Sequel Ace strings target, uploads strings to Crowdin, builds them, downloads them and commits to git"
   lane :update_strings do |options|
      build_mac_app(
         workspace: WORKSPACE_NAME,
         scheme: "Update Strings",
         configuration: "Debug",
         silent: true,
         skip_package_pkg: true,
         skip_archive: true
      )

      # Commit strings updates
      repo_clean = `git status --porcelain`.empty?
      if !repo_clean
         sh "git add -A && git commit -m 'Update strings'"
      end
   end

   desc "Increase build number"
   lane :increment_build_version do |options|
      # Bump build number
      increment_build_number(xcodeproj: PROJECT_NAME)
      increment_build_number(xcodeproj: QK_PROJECT_NAME)
      increment_build_number(xcodeproj: SPMYSQL_PROJECT_NAME)
      sh "git add -A && git commit -m 'Increment build version'"
   end

   desc "Increase app version"
   lane :increment_app_version do |options|
      increment_version_number(xcodeproj: PROJECT_NAME, bump_type: "minor")
      increment_version_number(xcodeproj: QK_PROJECT_NAME, bump_type: "minor")
      increment_version_number(xcodeproj: SPMYSQL_PROJECT_NAME, bump_type: "minor")
      sh "git add -A && git commit -m 'Increment app version'"
   end

   desc "Increase app patch version"
   lane :increment_app_patch_version do |options|
      increment_version_number(xcodeproj: PROJECT_NAME, bump_type: "patch")
      increment_version_number(xcodeproj: QK_PROJECT_NAME, bump_type: "patch")
      increment_version_number(xcodeproj: SPMYSQL_PROJECT_NAME, bump_type: "patch")
      sh "git add -A && git commit -m 'Increment app patch version'"
   end

   desc "appcenter_fetch_version"
   lane :appcenter_fetch_version do |options|
      UI.message("\n\n\n=====================================\n Fetch latest version: \n=====================================")
      version = appcenter_fetch_version_number()
      UI.message(version.to_s)
   end

   desc "appcenter_upload_dsyms"
   lane :appcenter_upload_dsyms do |options|
      UI.message("\n\n\n=====================================\n uploading only dSYM files\n=====================================")
      appcenter_upload(
         dsym: DYSYM_PATH,
         upload_dsym_only: true,
         strict: 'true'
         )
   end

   desc "do_build"
   lane :do_build do |options|
      UI.message("\n\n\n=====================================\n BUILDING Sequel Ace Local Testing \n=====================================")
      xcodebuild(
         archive: true,
         archive_path: ARCHIVE_PATH,
         scheme: "Sequel Ace Local Testing",
         workspace: WORKSPACE_NAME,
         configuration: "Debug"
      )
   end
end